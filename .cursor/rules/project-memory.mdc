---
description: Project Memory for OpenNext + tRPC + Hono + Cloudflare Full-Stack Application
globs:
alwaysApply: true
---

# Project Memory: OpenNext + tRPC + Hono + Cloudflare

## Project Overview
This is a modern, type-safe full-stack application that enables users to create and view posts with optimal performance through Cloudflare Workers and edge computing. The project combines OpenNext (Next.js for Cloudflare), tRPC for type-safe communication, Hono for the backend API, and SQLite with Drizzle ORM for data persistence.

## Architecture

### Frontend (Cloudflare Workers)
- **Location**: `/frontend/`
- **Framework**: Next.js 15.4.6 with OpenNext adapter
- **Runtime**: Bun
- **Deployment**: Cloudflare Workers via OpenNext
- **UI Framework**: shadcn/ui with Tailwind CSS 4
- **Fonts**: Geist Sans and Geist Mono
- **Key Features**:
  - Edge computing with global distribution
  - Type-safe communication with backend via tRPC
  - Modern UI with shadcn/ui components
  - Optimized for Cloudflare's 10MB bundle limit

### Backend (VM Deployment)
- **Location**: `/backend/`
- **Framework**: Hono 4.9.5
- **Runtime**: Bun
- **Database**: SQLite with Drizzle ORM
- **Key Features**:
  - Lightweight, fast API server
  - Type-safe database operations with Drizzle
  - RESTful endpoints for post management
  - Health check endpoint

### Database
- **Type**: SQLite
- **ORM**: Drizzle ORM 0.44.5
- **Schema**: Posts table with id, content, and created_at fields
- **Location**: `sqlite.db` in backend directory
- **Migrations**: Managed via Drizzle Kit

## Project Structure

```
opennext-trpc-hono-cf/
â”œâ”€â”€ frontend/                 # Next.js app (Cloudflare Workers)
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ app/             # Next.js app router
â”‚   â”‚   â”‚   â”œâ”€â”€ layout.tsx   # Root layout with Geist fonts and tRPC provider
â”‚   â”‚   â”‚   â”œâ”€â”€ page.tsx     # Home page with post management UI
â”‚   â”‚   â”‚   â”œâ”€â”€ globals.css  # Tailwind CSS with custom theme
â”‚   â”‚   â”‚   â””â”€â”€ favicon.ico
â”‚   â”‚   â””â”€â”€ lib/
â”‚   â”‚       â”œâ”€â”€ utils.ts     # Utility functions (cn for class merging)
â”‚   â”‚       â””â”€â”€ trpc/
â”‚   â”‚           â”œâ”€â”€ client.ts    # tRPC client configuration
â”‚   â”‚           â”œâ”€â”€ provider.tsx # tRPC provider with React Query
â”‚   â”‚           â””â”€â”€ hooks.ts     # Custom tRPC hooks for posts
â”‚   â”œâ”€â”€ public/              # Static assets (SVG icons)
â”‚   â”œâ”€â”€ package.json         # Dependencies and scripts
â”‚   â”œâ”€â”€ next.config.ts       # Next.js config with OpenNext
â”‚   â”œâ”€â”€ open-next.config.ts  # OpenNext Cloudflare configuration
â”‚   â”œâ”€â”€ wrangler.jsonc       # Cloudflare Workers configuration
â”‚   â”œâ”€â”€ components.json      # shadcn/ui configuration
â”‚   â””â”€â”€ tsconfig.json        # TypeScript configuration
â”‚
â”œâ”€â”€ backend/                 # Hono API (VM deployment)
â”‚   â”œâ”€â”€ src/
â”‚   â”‚   â”œâ”€â”€ index.ts         # Main Hono application with tRPC
â”‚   â”‚   â”œâ”€â”€ trpc/
â”‚   â”‚   â”‚   â”œâ”€â”€ router.ts    # tRPC router with post procedures
â”‚   â”‚   â”‚   â””â”€â”€ context.ts   # tRPC context and initialization
â”‚   â”‚   â””â”€â”€ db/
â”‚   â”‚       â””â”€â”€ schema/
â”‚   â”‚           â””â”€â”€ post.ts  # Database schema definition
â”‚   â”œâ”€â”€ drizzle/             # Database migrations
â”‚   â”‚   â”œâ”€â”€ 0000_melodic_monster_badoon.sql
â”‚   â”‚   â””â”€â”€ meta/            # Migration metadata
â”‚   â”œâ”€â”€ adapter.ts           # Database adapter with LibSQL client
â”‚   â”œâ”€â”€ drizzle.config.ts    # Drizzle Kit configuration
â”‚   â”œâ”€â”€ package.json         # Dependencies and scripts
â”‚   â”œâ”€â”€ sqlite.db           # SQLite database file
â”‚   â””â”€â”€ tsconfig.json        # TypeScript configuration
â”‚
â”œâ”€â”€ docs/
â”‚   â””â”€â”€ prd.md              # Project Requirements Document
â”œâ”€â”€ README.md               # Comprehensive project documentation
â”œâ”€â”€ task.md                 # Project task breakdown and timeline
â””â”€â”€ final.md                # (Excluded from memory as requested)
```

## Key Dependencies

### Frontend Dependencies
- `@opennextjs/cloudflare`: ^1.3.0 - OpenNext adapter for Cloudflare
- `@tanstack/react-query`: ^5.85.6 - Data fetching and caching
- `@trpc/client`: ^11.5.0 - tRPC client for type-safe API calls
- `@trpc/next`: ^11.5.0 - Next.js integration for tRPC
- `@trpc/react-query`: ^11.5.0 - React Query integration for tRPC
- `@trpc/server`: ^11.5.0 - tRPC server utilities
- `next`: 15.4.6 - React framework
- `react`: 19.1.0 - UI library
- `react-dom`: 19.1.0 - React DOM utilities
- `tailwindcss`: ^4 - CSS framework
- `class-variance-authority`: ^0.7.1 - Component variant management
- `clsx`: ^2.1.1 - Conditional className utility
- `tailwind-merge`: ^3.3.1 - Tailwind class merging
- `lucide-react`: ^0.542.0 - Icon library
- `wrangler`: ^4.33.1 - Cloudflare Workers CLI

### Backend Dependencies
- `@hono/trpc-server`: ^0.4.0 - Hono integration for tRPC
- `@trpc/server`: ^11.5.0 - tRPC server framework
- `hono`: ^4.9.5 - Web framework
- `drizzle-orm`: ^0.44.5 - Type-safe ORM
- `drizzle-kit`: ^0.31.4 - Database toolkit
- `@libsql/client`: ^0.15.14 - LibSQL client
- `better-sqlite3`: ^12.2.0 - SQLite driver
- `zod`: ^4.1.5 - Schema validation
- `dotenv`: ^17.2.1 - Environment variables

## Configuration Files

### Frontend Configuration
- **next.config.ts**: Basic Next.js config with OpenNext Cloudflare initialization
- **open-next.config.ts**: OpenNext configuration (R2 cache commented out)
- **wrangler.jsonc**: Cloudflare Workers config with Node.js compatibility
- **components.json**: shadcn/ui configuration with New York style
- **tsconfig.json**: TypeScript config with path aliases (@/*)

### Backend Configuration
- **drizzle.config.ts**: Drizzle Kit config for SQLite with schema path
- **adapter.ts**: Database connection using LibSQL client with Zod validation
- **tsconfig.json**: TypeScript config with strict settings and path aliases

## Current Implementation Status

### Completed
- âœ… Project structure setup
- âœ… Frontend Next.js with OpenNext configuration
- âœ… Backend Hono with tRPC integration
- âœ… Database schema definition and migrations
- âœ… TypeScript configurations
- âœ… shadcn/ui setup with Tailwind CSS
- âœ… Cloudflare Workers configuration
- âœ… tRPC integration between frontend and backend
- âœ… Post creation and retrieval API endpoints
- âœ… UI components for post management
- âœ… Database migrations (posts table created)
- âœ… Full CRUD functionality for posts

### In Progress/Planned
- ðŸ”„ Environment variable configuration for production
- ðŸ”„ Deployment configurations
- ðŸ”„ Error handling improvements
- ðŸ”„ Testing implementation

## Development Commands

### Frontend
```bash
cd frontend
bun run dev          # Start development server with Turbopack
bun run build        # Build for production
bun run start        # Start production server
bun run lint         # Run ESLint
bun run deploy       # Deploy to Cloudflare Workers
bun run preview      # Preview Cloudflare deployment
bun run cf-typegen   # Generate Cloudflare types
```

### Backend
```bash
cd backend
bun run dev          # Start development server with hot reload
bun run db:generate  # Generate database types
bun run db:migrate   # Run database migrations
bun run db:push      # Push schema changes to database
bun run lint         # Run ESLint
bun run lint:fix     # Fix ESLint issues
```

## Database Schema
```sql
-- Posts table (implemented)
CREATE TABLE posts (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  content TEXT NOT NULL,
  created_at TEXT DEFAULT CURRENT_TIMESTAMP NOT NULL
);
```

### Database Implementation
- **Schema Location**: `backend/src/db/schema/post.ts`
- **Migration**: `backend/drizzle/0000_melodic_monster_badoon.sql`
- **Connection**: LibSQL client with Drizzle ORM
- **Validation**: Zod schemas for environment variables

## API Endpoints

### tRPC Procedures (Implemented)
- `getPosts` - Retrieve all posts with ordering by creation date
- `createPost` - Create a new post with content validation
- `getPost` - Retrieve a single post by ID

### REST Endpoints
- `GET /health` - Health check endpoint
- `GET /` - Basic hello world endpoint
- `POST /trpc/*` - tRPC endpoint for all procedures

## Deployment Strategy
- **Frontend**: Cloudflare Workers via OpenNext
- **Backend**: VM deployment with PM2 process management
- **Database**: SQLite file on VM
- **Domain**: Custom domain configuration planned

## Performance Targets
- API response time < 500ms
- UI loads in < 2s
- Bundle size under Cloudflare's 10MB limit
- Near-instant cold start times (~0ms)

## Security Considerations
- Input validation with Zod schemas
- CORS configuration for cross-origin requests
- SQL injection prevention via Drizzle ORM
- HTTPS automatic SSL termination at Cloudflare edge

## Development Environment
- **OS**: Linux (WSL2)
- **Runtime**: Bun
- **Package Manager**: Bun
- **IDE**: Cursor
- **Version Control**: Git

## Project Goals
1. Demonstrate modern full-stack development with edge computing
2. Showcase type-safe communication between frontend and backend
3. Optimize for performance and developer experience
4. Deploy on Cloudflare Workers for global distribution
5. Implement a simple but complete CRUD application

## Notes
- The project has a fully functional implementation with tRPC integration
- Frontend includes a complete post management UI with create and view functionality
- Backend has working tRPC procedures for post CRUD operations
- Database schema is implemented with migrations applied
- Environment variable configuration needed for production deployment
- CORS is configured for cross-origin requests between frontend and backend
- The application is ready for deployment with proper environment setup